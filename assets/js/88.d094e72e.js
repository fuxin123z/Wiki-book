(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{443:function(r,t,e){"use strict";e.r(t);var o=e(10),a=Object(o.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"docker-学习笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-学习笔记"}},[r._v("#")]),r._v(" Docker 学习笔记")]),r._v(" "),e("h2",{attrs:{id:"docker-是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-是什么？"}},[r._v("#")]),r._v(" Docker 是什么？")]),r._v(" "),e("p",[r._v("Docker 将软件与所需的环境捆绑在了一起，提供给用户使用。这样可以避免在不同的机器上出现不同的结果（或因环境不同而出现的错误）。")]),r._v(" "),e("p",[r._v("可以类比虚拟机，它也是带环境安装的一种解决方案。但虚拟机过于庞大、占用资源多，所以也产生了另一种虚拟化技术叫 Linux 容器（Linux Containers/LXC）。其原理并非模拟一个完整的操作系统，而是对进程进行隔离（在进程外套了一个保护层）。相比虚拟机，容器资源占用少、启动快、体积小。")]),r._v(" "),e("p",[r._v("Docker 属于 Linux 容器的一种封装。它将应用程序与该程序的依赖，打包在一个文件里面。行这个文件，就会生成一个虚拟容器。程序就运行在这个虚拟容器里面，不必担心环境问题。")]),r._v(" "),e("blockquote",[e("p",[r._v("Docker 的主要用途，目前有三大类：")]),r._v(" "),e("ul",[e("li",[e("strong",[r._v("提供一次性的环境")]),r._v("。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境")]),r._v(" "),e("li",[e("strong",[r._v("提供弹性的云服务")]),r._v("。因为 Docker 容器可以随开随关，很适合动态扩容和缩容")]),r._v(" "),e("li",[e("strong",[r._v("组建微服务架构")]),r._v("。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构")])])]),r._v(" "),e("h2",{attrs:{id:"docker-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装"}},[r._v("#")]),r._v(" Docker 安装")]),r._v(" "),e("p",[r._v("详见 "),e("a",{attrs:{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[r._v("Install Docker Engine")]),e("OutboundLink")],1)]),r._v(" "),e("h2",{attrs:{id:"docker-基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-基本概念"}},[r._v("#")]),r._v(" Docker 基本概念")]),r._v(" "),e("p",[r._v("Docker 有三个基本概念：")]),r._v(" "),e("ul",[e("li",[e("strong",[r._v("镜像 / 文件（Image）")]),r._v("：将软件与环境封装在一起，就成了一个镜像")]),r._v(" "),e("li",[e("strong",[r._v("容器（Container）")]),r._v("：借用面向对象的思想，镜像是一个类，容器就是将类实例化，生成的一个对象。镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等")]),r._v(" "),e("li",[e("strong",[r._v("仓库（Repository）")]),r._v("：类似一个代码控制中心，用来保存镜像。")])]),r._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[r._v("#")]),r._v(" 总结")]),r._v(" "),e("h2",{attrs:{id:"参考与致谢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考与致谢"}},[r._v("#")]),r._v(" 参考与致谢")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:""}})])]),r._v(" "),e("blockquote",[e("p",[r._v("文章作者："),e("strong",[r._v("Power Lin")]),r._v("\n原文地址："),e("a",{attrs:{href:"https://wiki-power.com",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://wiki-power.com"),e("OutboundLink")],1),r._v("\n版权声明：文章采用 "),e("a",{attrs:{href:"https://creativecommons.org/licenses/by/4.0/deed.zh",target:"_blank",rel:"noopener noreferrer"}},[r._v("CC BY-NC-SA 4.0"),e("OutboundLink")],1),r._v(" 协议，转载请注明出处。")])])])}),[],!1,null,null,null);t.default=a.exports}}]);