(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{443:function(e,r,t){"use strict";t.r(r);var s=t(10),a=Object(s.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker-学习笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-学习笔记"}},[e._v("#")]),e._v(" Docker 学习笔记")]),e._v(" "),t("h2",{attrs:{id:"docker-是什么？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-是什么？"}},[e._v("#")]),e._v(" Docker 是什么？")]),e._v(" "),t("p",[e._v("Docker 将软件与所需的环境捆绑在了一起，提供给用户使用。这样可以避免在不同的机器上出现不同的结果（或因环境不同而出现的错误）。")]),e._v(" "),t("p",[e._v("可以类比虚拟机，它也是带环境安装的一种解决方案。但虚拟机过于庞大、占用资源多，所以也产生了另一种虚拟化技术叫 Linux 容器（Linux Containers/LXC）。其原理并非模拟一个完整的操作系统，而是对进程进行隔离（在进程外套了一个保护层）。相比虚拟机，容器资源占用少、启动快、体积小。")]),e._v(" "),t("p",[e._v("Docker 属于 Linux 容器的一种封装。它将应用程序与该程序的依赖，打包在一个文件里面。行这个文件，就会生成一个虚拟容器。程序就运行在这个虚拟容器里面，不必担心环境问题。")]),e._v(" "),t("blockquote",[t("p",[e._v("Docker 的主要用途，目前有三大类：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("提供一次性的环境")]),e._v("。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境")]),e._v(" "),t("li",[t("strong",[e._v("提供弹性的云服务")]),e._v("。因为 Docker 容器可以随开随关，很适合动态扩容和缩容")]),e._v(" "),t("li",[t("strong",[e._v("组建微服务架构")]),e._v("。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构")])])]),e._v(" "),t("h2",{attrs:{id:"docker-基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-基本概念"}},[e._v("#")]),e._v(" Docker 基本概念")]),e._v(" "),t("p",[e._v("Docker 有三个基本概念：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("镜像 / 文件（Image）")]),e._v("：将软件与环境封装在一起，就成了一个镜像")]),e._v(" "),t("li",[t("strong",[e._v("容器（Container）")]),e._v("：借用面向对象的思想，镜像是一个类，容器就是将类实例化，生成的一个对象。镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等")]),e._v(" "),t("li",[t("strong",[e._v("仓库（Repository）")]),e._v("：类似一个代码控制中心，用来保存镜像。")])]),e._v(" "),t("h2",{attrs:{id:"docker-安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装"}},[e._v("#")]),e._v(" Docker 安装")]),e._v(" "),t("p",[e._v("详见 "),t("a",{attrs:{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[e._v("Install Docker Engine")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("安装完成后，运行下面的命令，验证是否安装成功：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("$ docker version\n")])])]),t("p",[e._v("Docker 需要 "),t("code",[e._v("sudo")]),e._v(" 权限。为了避免每次使用都要获取权限，可以把用户加入 Docker 用户组：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("groupadd")]),e._v(" docker\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("usermod")]),e._v(" -aG docker "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$USER")]),e._v("\n")])])]),t("p",[e._v("重启 Docker 后测试：")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("$ docker run hello-world\n")])])]),t("p",[e._v("能看到 "),t("code",[e._v("hello-world")]),e._v(" 的提示信息则为成功。")]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("h2",{attrs:{id:"参考与致谢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考与致谢"}},[e._v("#")]),e._v(" 参考与致谢")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:""}})])]),e._v(" "),t("blockquote",[t("p",[e._v("文章作者："),t("strong",[e._v("Power Lin")]),e._v("\n原文地址："),t("a",{attrs:{href:"https://wiki-power.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki-power.com"),t("OutboundLink")],1),e._v("\n版权声明：文章采用 "),t("a",{attrs:{href:"https://creativecommons.org/licenses/by/4.0/deed.zh",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC BY-NC-SA 4.0"),t("OutboundLink")],1),e._v(" 协议，转载请注明出处。")])])])}),[],!1,null,null,null);r.default=a.exports}}]);